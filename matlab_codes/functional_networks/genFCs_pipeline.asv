clear all
run('/home/dcuric/Documents/calciumAnalysis/matlab_codes/init_analysis.m')

load(['/home/dcuric/Documents/calciumAnalysis/matlab_codes/allRecordings_carnot.mat']);
T = project.project_table;
project_root = project.project_root;
conds = uniquecell(T.condition);

%%

reclist = T(find(contains(T.condition,'Awake')),:);% | (contains(T.condition,'Iso1')));

%reclist = find(contains(T.dataset,'GCamp6_hip_rosbengal') | contains(T.dataset,'seizure') | contains(T.condition,'ket100'));

%reclist = find(contains(T.dataset,'accute_stress'));


%%
[validPixels,dmask] = get_universal_mask(setpathsloc);
    

%%

clear ImgF


% warp = 1;
% err = 0;
% ntrials = 10;


%The image warping can cause a lot of memory use. batchblocks is the number
%of blocks the recording is split into, warped, and recombined into.
batchblocks = 4;

FCderivativeTable = table(); 

for iexp = 1%258%reclist'
    row = reclist(iexp,:);

    recording_path = [project_root '/raw_data/' row.paths{1}];
    recording_name = [recording_path '/' row.names{1}];

    [ImgF, good_frames,segment_to_keep] = get_calcium_recording(recording_name,row, 'down_sample', 1, 'batch_blocks', batchblocks);
    ImgF = ImgF(:,:,[good_frames{segment_to_keep}]);
    ImgF = threeD_to_twoD(ImgF, 'validPixels', validPixels);

    
    subnetworks = get_subnetworks(recording_path, dorsalMaps, 'global_mask', dmask);
    
    
    clear v
    for i = 1:length(subnetworks);
        px = subnetworks{i};
        v(i,:) = zscore(nanmean(ImgF(px,:)));
    end
    
    C = corrcoef(v');
    
    main_save_dir = ['/derivatives/' row.paths{1}];
    save_dir = [main_save_dir '/length_uncontrolled/'];
    checkifDirExists([project_root save_dir])
    save_name = [strrep(row.names{1}, '.raw', '.mat')];

    FCrow = table();
    FCrow.names = save_name;
    FCrow.paths = save_dir;
    FCrow.type = 'FC';
    FCrow.length_controlled = 0;
    FCrow.random_sampled = 0;
    FCrow.OG_length = size(v,2);
    FCrow.numROI = size(v,1);
    FCrow.computer = 'carnot';

    FCderivativeTable = [FCderivativeTable; FCrow];
end

%%
FCderivativeTable = [FCderivativeTable; FCrow];


function FCrow = make_FC(ImgF, subnetworks, params, row)

     

  clear v
    for i = 1:length(subnetworks);
        px = subnetworks{i};

        if params.random_sample;
            px = datasample(px, floor(length(px)/2), 'Replace', false);
        end

        if params.len_control > 0;
            v(i,:) = zscore(nanmean(ImgF(px,1:params.len_control)));
        else
            v(i,:) = zscore(nanmean(ImgF(px,:)));
        end
    end
    
    C = corrcoef(v');
    
    main_save_dir = ['/derivatives/' row.paths{1}];
    
    save_dir = [main_save_dir];
    if params.len_control >0
        save_dir = [save_dir '/len_control=' num2str(params.len_control) '/'];
    end
    if params.random_sample
        save_dir = [save_dir '/random_sample/'];
    end
 

    checkifDirExists([project_root save_dir])
    save_name = [strrep(row.names{1}, '.raw', '.mat')];

    FCrow = table();
    FCrow.names = save_name;
    FCrow.paths = save_dir;
    FCrow.type = 'FC';
    FCrow.len_control = params.len_control;
    FCrow.random_sampled = params.random_sample;
    FCrow.OG_length = size(v,2);
    FCrow.numROI = size(v,1);
    FCrow.computer = 'carnot';

    save([project_root main_save_dir save_name], 'C')


end


%
%     networkActivity = zeros(64, size(ImgF,2));
%     randomsample_networkActivity = cell(1,ntrials);%zeros(64, size(ImgF,2));
%     randsample_lengthcontrolled_networkActivity = cell(1,ntrials);
%     numPix = [];
%     
%     for rr = 1:64;
%         idx = find(maskOG == rr);
%         networkActivity(rr,:) = zscore(mean(zscore(ImgF(idx,:),0,2),1));
%         numPix(rr) = length(idx);
% 
%         %also take random samples
%         if numPix(rr) > 50;
%         for trial = 1:ntrials
%             idx2 = datasample(idx, 50, 'Replace', false);
%             randomsample_networkActivity{trial}(rr,:) = zscore(mean(zscore(ImgF(idx2,:), 0,2),1)); 
%             
%             if size(ImgF,2) >= 4000;
%                 randsample_lengthcontrolled_networkActivity {trial}(rr,:) = zscore(mean(zscore(ImgF(idx2,1:4000),0,2),1));
%             end
% 
%         end
%         end
%     end
%     
% %
%     C = corrcoef(networkActivity');
%     nanidx = find(nansum(C) == 0);
% 
% 
%     savedir = [expLoc '/results/' 'lengthUncontrolled/'...
%              'recid=' num2str(T(iexp,:).rec_id) '/' ];
%     checkifDirExists(savedir)
%     resultToSave = {C, nanidx, numPix};
%     savename = 'functionalConnectome';
% 
%     save([savedir savename '.mat'], 'resultToSave')
% 
% 
%     %now calculate random sample FCs
%     nanidx = cell(1, ntrials);
%     Crs = cell(1, ntrials);
%     for trial = 1:ntrials
%         Crs{trial} = corrcoef(randomsample_networkActivity{trial}');
%         nanidx{trial} = find(nansum(Crs{trial}) == 0);
%     end
% 
%     savedir = [expLoc '/results/' 'randomSample/' ...
%              'recid=' num2str(T(iexp,:).rec_id) '/'];
%     checkifDirExists(savedir)
%     resultToSave = {Crs, nanidx};
%     save([savedir savename '.mat'], 'resultToSave')
%     
%     %now calculate random sample length controlled FCs
%     nanidx = cell(1, ntrials);
%     Crslc = cell(1, ntrials);
%     for trial = 1:ntrials
%         Crslc{trial} = corrcoef(randsample_lengthcontrolled_networkActivity{trial}');
%         nanidx{trial} = find(nansum(Crslc{trial}) == 0);
%     end
% 
%     savedir = [expLoc '/results/' 'randomSampleLengthControlled/' ...
%              'recid=' num2str(T(iexp,:).rec_id) '/' ];
%     checkifDirExists(savedir)
%     resultToSave = {Crslc, nanidx};
%     save([savedir savename '.mat'], 'resultToSave')
% 
% 
%     clear C Crs Crslc nanidx resultToSave ImgF ImgF2
%      
% 
%    % clear ImgF ImgF2
% %end
% 
